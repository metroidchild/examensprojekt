<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>login_name = "";

// Skapa en användarnamnsdialog och koppla objektet till username variabeln
username = instance_create(128,64,o_ui_textbox);
// Inställningar
with (username)
    {
    callback = asset_get_index("drm_username");
    prew_txt = "username";
    max_length = 15;
    }

// Skapa en lösenordsdialog och koppla objektet till password variabeln
password = instance_create(128,64+32,o_ui_password);
// Inställningar
with (password)
    {
    callback = asset_get_index("drm_password");
    prew_txt = "password";
    max_length = 15;
    }

// Request variabel som kommer att användas i ett async http event
var request;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Om spelaren trycker enter
if (keyboard_check_pressed(vk_enter) &amp;&amp; room == room_login)
    {
    // Om användaren redan är inloggad (eller simulerar genom F12), starta spelet
    // Om användaren inte loggar in genom att trycka shift + enter, starta spelet nerlåst
    if (global.logged_in || keyboard_check(vk_f12))
        {
        global.logged_in = true;
        room_goto_next();
        }
    else
    if (keyboard_check(vk_lshift) || keyboard_check(vk_rshift))
        room_goto_next();
    
    // Sätt in användarnamn i temporär variabel
    login_name = username.str;
    
    // Gör http request för att få en inloggning eller error
    request = http_get("https://examensprojekt.herokuapp.com/auth/verify.php"+ 
                           "?user="+username.str+
                           "&amp;password="+password.str
                       );
    global.status_str = "Logging in...";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// "Tom" string
var r_str = "null";
// Kolla vilket id den asynkrona datan har (detta ändras med paketen)
if ds_map_find_value(async_load, "id") == request
    {
    // Om det inta har blivigt något fel med datan, fortsätt
    if ds_map_find_value(async_load, "status") == 0
        {
        // Skriv in resultatet i en temporär string
        r_str = ds_map_find_value(async_load, "result");
        // Kolla om användaren har blivit inloggad
        // Om inte, skriv error meddelande och avaktivera inloggningen
        if (r_str == "LOGGED IN")
            {
            show_debug_message("logged in");
            global.status_str = "Logged in as: "+login_name;
            global.logged_in = true;
            }
        else
            {
            global.status_str = r_str;
            global.logged_in = false;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// rita ut text
draw_set_colour(c_black);
draw_text(6, 5, global.status_str);
draw_text(6, 5+12, "Shift + Enter to play offline");
draw_text(6, 5+24, "F12 + Enter to simulate online");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
