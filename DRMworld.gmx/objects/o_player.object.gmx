<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_idle = spr_player_idle;
sprite_walk = spr_player_walk;

sprite_current = sprite_idle;

// speed multiplier
spd = 1;

// leftright control
lr = 0;
lr_old = 1; // make sure a direction exists
// updown control
ud = 0;
ud_old = ud;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set up leftright variable
lr = 0;
if (keyboard_check(vk_left))
    lr--;
if (keyboard_check(vk_right))
    lr++;

// set up updown variable
ud = 0;
if (keyboard_check(vk_up))
    ud--;
if (keyboard_check(vk_down))
    ud++;

// keep last used lr value
if (lr != 0)
    lr_old = lr;
    
// move player using lr and ud value
if (!place_meeting(x+lr*spd, y, o_solid))
    x += lr*spd;
if (!place_meeting(x, y+ud*spd, o_solid))
    y += ud*spd;

// change animation based on movement
if (lr &gt; 0)
    {
    sprite_index = sprite_walk;
    image_xscale = 1;
    image_speed = (14*spd)/room_speed;
    }
else
if (lr &lt; 0)
    {
    sprite_index = sprite_walk;
    image_xscale = -1;
    image_speed = (14*spd)/room_speed;
    }
else
    {
    sprite_index = sprite_idle;
    image_xscale = 1;
    image_speed = 8/room_speed;
    }
// keep last as it overrides other animations
if (ud != 0)
    {
    sprite_index = sprite_walk;
    image_xscale = lr_old;
    image_speed = (18*spd)/room_speed;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
